<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 0xc4m3l</title>
        <link>https://example.com/post/</link>
        <description>Recent content in Posts on 0xc4m3l</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>0xc4m3l</copyright>
        <lastBuildDate>Mon, 31 Mar 2025 22:39:42 +0800</lastBuildDate><atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>windows 内核开发 (1)</title>
        <link>https://example.com/p/windows-%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-1/</link>
        <pubDate>Mon, 31 Mar 2025 22:39:42 +0800</pubDate>
        
        <guid>https://example.com/p/windows-%E5%86%85%E6%A0%B8%E5%BC%80%E5%8F%91-1/</guid>
        <description>&lt;h1 id=&#34;介绍&#34;&gt;介绍
&lt;/h1&gt;&lt;p&gt;主要通过学习 《Windows Kernel Programming》，了解  windows 相关内核机制，进而实现对应 EDR，DLP能力，实现windows 企业安全监控。&lt;/p&gt;
&lt;p&gt;可做为中文学习资料。&lt;/p&gt;
&lt;p&gt;该书使用 C和C++作为代码示例: &lt;a class=&#34;link&#34; href=&#34;https://github.com/zodiacon/windowskernelprogrammingbook2e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/zodiacon/windowskernelprogrammingbook2e&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;第一章-windows-internals-overview&#34;&gt;第一章 Windows Internals Overview
&lt;/h1&gt;&lt;p&gt;该章是windows的关键工作概念，需要理解这一章内容，为后续学习做基础。&lt;/p&gt;
&lt;h2 id=&#34;processes-进程&#34;&gt;Processes 进程
&lt;/h2&gt;&lt;p&gt;是一个容器（containment）和 管理对象（ management object），程序的运行实例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;线程&lt;/code&gt; 是实际执行代码并实现技术意义上运行的实体。 （比较绕口hhh&lt;/p&gt;
&lt;p&gt;在Windows 内核架构中，线程（thread）作为调度的基本单位，核心是执行代码片段来实现 “运行” 的实质。&lt;/p&gt;
&lt;p&gt;流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可执行程序&lt;/strong&gt; —— 包含初始代码和数据（用于进程代码执行）某些特殊进程（内核直接创建的进程）可能不存在可执行的映像文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有虚拟地址空间&lt;/strong&gt; —— 供进程内部代码按需分配内存的隔离地址域。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;access token&lt;/strong&gt; （primary token）令牌 —— 存储进程安全上下文的对象，并且提供给线程用于执行（除非线程通过模仿使用假设的不同令牌）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有句柄表（private handle table）&lt;/strong&gt; —— 用于管理进程执行对象的引用（事件、信号量、文件等）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一个或多个执行线程&lt;/strong&gt; —— 常规用户模式进程在创建时默认包含一个线程（执行传统的main/WinMain函数）。不含线程的用户模式进程通常是无用的，在正常情况下会被内核销毁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;书中提到的相关结构关系图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250403224717688.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250403224717688&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PID：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;process ID 为 进程的唯一标识，只要内核对象存在就是独一无二的。如果内核对象毁坏，那么这个ID可能会被分配个新的进程（process id 复用）。进程文件不能认为是进程的唯一标识。&lt;/p&gt;
&lt;h2 id=&#34;virtual-memory-虚拟内容&#34;&gt;Virtual Memory 虚拟内容
&lt;/h2&gt;&lt;p&gt;每个进程都有它自己的虚拟私有线性地址空间。&lt;/p&gt;
&lt;p&gt;虚拟地址空间初试为空（或者接近空），&lt;strong&gt;可执行映像和NtDll.Dll会首先被映射，随后加载更多子系统DLL。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当主线程开始执行，会分配更多空间，加载更多的 DLLs。&lt;/p&gt;
&lt;p&gt;这个虚拟机空间是私有的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地址空间范围从零开始（严格来说，首尾各64KB空间无法提交），其上限取决于进程&amp;quot;位宽&amp;quot;（32位或64位）与操作系统位宽的配合关系&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基础介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;32位Windows 系统上的 32位进程，默认地址空间位 2GB。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32位Windows 系统上的 32位进程，设置 &lt;em&gt;increase user virtual address space&lt;/em&gt; 最大分配 3GB。且必须满足进程的可执行程序PE头设置 &lt;code&gt;LARGEADDRESSAWARE&lt;/code&gt;链接器标志。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64位程序（64位win上），这个地址为 8TB（win8 或 更早版本）或者 128TB（win 8.1 或之后版本呢）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32位程序（64位win上），可执行程序PE头设置 &lt;code&gt;LARGEADDRESSAWARE&lt;/code&gt;链接器标志，地址空间为 4GB，否者还是2GB。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么是 2G：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	因为在32位中，2GB地址空间仅需31位寻址，最高有效位（MSB/bit 31）原可供应用程序自由使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2GB空间（0x00000000-0x7FFFFFFF）：bit 31始终为0&lt;/li&gt;
&lt;li&gt;扩展空间（0x80000000-0xFFFFFFFF）：bit 31=1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟地址为相对的，和物理内存（RAM）间接映射。且虚拟是从执行角度看，若内存已经映射到RAM，那么CPU会在访问数据之前完成虚拟到物理地址的转换；若内存未驻留，由转换表条目中的标志位指示），CPU将触发缺页异常，使内存管理器的缺页处理程序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从对应文件获取数据（当缺页有效时）&lt;/li&gt;
&lt;li&gt;复制到RAM&lt;/li&gt;
&lt;li&gt;更新映射该缓冲区的页表项&lt;/li&gt;
&lt;li&gt;通知CPU重试操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虚拟、物理地址映射如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250403231103991.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250403231103991&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;内存的基本管理单位为 &lt;strong&gt;页 page&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;内存相关的属性，均以页为单位进行管理，包含 保护标志或状态。&lt;/p&gt;
&lt;p&gt;页大小与CPU架构有关。&lt;/p&gt;
&lt;p&gt;Windows中标准页的大小为 4KB。&lt;/p&gt;
&lt;p&gt;win还支持大页：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;x86/x64/ARM64架构&lt;/strong&gt;：2MB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ARM32架构&lt;/strong&gt;：4MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实现原理是通过页目录项（PDE）直接映射大页，绕过页表层级。这种设计带来：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;更快的地址转换&lt;/strong&gt;（减少一次页表查询）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更高的TLB命中率&lt;/strong&gt;（单个TLB条目可覆盖更大内存范围）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;大页有什么缺点呢？&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;大页面需要在RAM中有连续的内存，如果内存紧张或非常碎片化，这可能会失败。&lt;/li&gt;
&lt;li&gt;大页面总是不可分页的。&lt;/li&gt;
&lt;li&gt;只能使用读/写保护。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 win10 和 win server 2016 中，有巨页的机制，支持 1GB。如果分配的大小至少为1 GB，则会自动对大页面使用这些方法，并且该大小可以定位为RAM中的连续大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Page State&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在虚拟内存中的每个也都有下面三种状态中的一种：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 空闲状态（Free）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：
页面完全未分配，无任何有效内容。访问此类页面将触发&lt;strong&gt;访问违规异常&lt;/strong&gt;（&lt;code&gt;ACCESS_VIOLATION&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型场景&lt;/strong&gt;：
新创建进程的绝大多数页面初始状态为 Free。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核数据结构&lt;/strong&gt;：
通过 &lt;code&gt;MMFREE_POOL_ENTRY&lt;/code&gt; 结构维护空闲页链表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 已提交状态（Committed）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：
页面已分配且可正常访问（前提是保护属性匹配，例如写入只读页仍会触发异常）。
提交页可能映射到：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理内存（RAM）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件映射&lt;/strong&gt;（如页面文件、内存映射文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 保留状态（Reserved）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：
页面未提交，但虚拟地址范围被预留，禁止其他分配器占用。
&lt;strong&gt;CPU视角&lt;/strong&gt;：与 Free 状态行为一致（访问触发异常），但地址空间被锁定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心用途&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;维护虚拟地址连续性（如线程栈的渐进式提交）&lt;/li&gt;
&lt;li&gt;减少物理内存占用（延迟提交）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;system-memory&#34;&gt;System Memory
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户模式分区 （User-mode space）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核模式分区（User-mode space）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作系统也必须驻留在某个地方——这个地方是系统支持的最高地址范围，如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在没有设置 &lt;em&gt;increase user virtual address space&lt;/em&gt; 的32位win系统上，虚拟空间上部分 2GB  0x80000000 to 0xFFFFFFFF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果设置 &lt;em&gt;increase user virtual address space&lt;/em&gt; 的32位win系统， 3GB，对应的地址为 0xC0000000 to 0xFFFFFFFF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64位的 Windows 8, Server 2012 and earlier，为 8TB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64位的 Windows 8.1, Server 2012 R2 and later, 为128TB&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;user process 和 System space 如图结构&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250403235123204.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250403235123204&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;系统空间和进程是没有关系的，它是为系统总的所有进程服务的相同驱动程序。&lt;/p&gt;
&lt;p&gt;系统空间地址不是相对的，对于进程上下文中看起来都是相同的，当然，从用户模式到系统空间的实际访问会导致访问冲突异常。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统空间是内核本身、硬件抽象层(HAL)以及已加载的内核驱动程序所在的区域。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户模式进程在其生命周期结束后不会留下任何资源泄漏——内核会负责关闭和释放已终止进程的所有私有资源(包括关闭所有句柄和释放所有私有内存)。&lt;/p&gt;
&lt;h2 id=&#34;threads-线程&#34;&gt;Threads 线程
&lt;/h2&gt;&lt;p&gt;这是代码运行的实际实体，线程包含在进程中，使用进程公开的资源来完成工作（例如虚拟内存和内核对象的句柄）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有对应运行模式，用户模式和内核模式&lt;/li&gt;
&lt;li&gt;执行上下文，包含寄存器和运行状态。&lt;/li&gt;
&lt;li&gt;一个或两个stack，用于本地变量分配和调用管理。&lt;/li&gt;
&lt;li&gt;Thread Local Storage （TLS），提供了一种使用统一访问语义存储线程私有数据的方法&lt;/li&gt;
&lt;li&gt;Base priority and a current (dynamic) priority.&lt;/li&gt;
&lt;li&gt;处理器亲和性，指示线程允许在哪个处理器上运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程常见状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ready&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Waiting&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;线程状态示意图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250405195947162.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250405195947162&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 堆栈的核心功能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;存储内容&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;函数调用时的返回地址&lt;/li&gt;
&lt;li&gt;局部变量&lt;/li&gt;
&lt;li&gt;部分架构中传递的函数参数（如x86）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;执行依赖&lt;/strong&gt;：线程执行期间必须依赖堆栈完成函数调用链和局部数据管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 双堆栈设计（用户态与内核态）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内核堆栈（Kernel Stack）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;位置&lt;/strong&gt;：始终位于内核空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;驻留性&lt;/strong&gt;：线程处于&lt;strong&gt;运行/就绪状态&lt;/strong&gt;时，强制驻留RAM（不可换出）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认大小&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;32位系统：12 KB&lt;/li&gt;
&lt;li&gt;64位系统：24 KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特性&lt;/strong&gt;：固定大小，无动态扩展机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户堆栈（User Stack）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;位置&lt;/strong&gt;：进程用户空间内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;驻留性&lt;/strong&gt;：可被页文件换出（与普通用户内存行为一致）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;默认上限&lt;/strong&gt;：通常可扩展至1 MB。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态扩展机制&lt;/strong&gt;：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始提交&lt;/strong&gt;：仅提交少量内存（如1个页面）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保护页&lt;/strong&gt;：相邻下一页标记为&lt;code&gt;PAGE_GUARD&lt;/code&gt;，触发访问异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需扩展&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;线程访问保护页时触发缺页异常→内存管理器提交新页→更新保护页位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保留空间&lt;/strong&gt;：未使用的地址空间仅保留（不占用物理内存）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 多线程示例&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程A&lt;/strong&gt;：包含线程1、线程2（各自独立的用户堆栈）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;进程B&lt;/strong&gt;：包含线程3（堆栈与其他进程隔离）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250420140235262.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250420140235262&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. 设计优势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;内存效率&lt;/strong&gt;：避免提前提交全部堆栈空间（如1 MB仅保留虚拟地址，按需分配物理页）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：保护页机制防止堆栈溢出破坏相邻内存区域。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Windows大多数情况下 使用 三个保护页&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250420192049166.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250420192049166&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;默认值由PE头决定&lt;/strong&gt;
线程用户栈的默认&lt;strong&gt;保留大小&lt;/strong&gt;和&lt;strong&gt;初始提交大小&lt;/strong&gt;由可执行文件的PE头定义。进程的&lt;strong&gt;主线程&lt;/strong&gt;必须使用这些默认值，而其他线程若不指定参数，也会继承PE头的默认设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;线程创建时可自定义堆栈大小&lt;/strong&gt;
通过&lt;code&gt;CreateThread&lt;/code&gt;等函数创建线程时，可&lt;strong&gt;单独指定初始提交大小或保留大小&lt;/strong&gt;（需配合标志位选择），若传0则回退到PE头默认值。主线程的堆栈大小不可自定义，始终采用PE头设定。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;函数CreateThread和CreateRemoteThread（Ex）只允许指定堆栈大小的单个值，可以是提交的或保留的大小，但不能两者都指定。本机（未记录）函数NtCreateThreadEx允许指定这两个值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键点总结表&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;特性&lt;/strong&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;内核堆栈&lt;/strong&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;用户堆栈&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;空间归属&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;内核地址空间&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;用户进程地址空间&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;物理内存驻留&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;始终驻留RAM&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;可被换出&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;大小&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;固定（12/24 KB）&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;动态扩展（默认上限1 MB）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;扩展机制&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;不支持扩展&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;保护页触发的按需提交&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;多线程共享&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;每个线程独立&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;同一进程的线程间隔离&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;system-services-系统服务&#34;&gt;System Services 系统服务
&lt;/h2&gt;&lt;p&gt;应用程序需要执行各种不纯计算性的操作，例如分配内存、打开文件、创建线程等。这些操作最终只能由在内核模式下运行的代码执行。那么用户模式代码如何能够执行这些操作呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例子：使用 notepad 使用File / Open菜单请求打开一个文件。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 用户态API调用链&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**应用程序（如Notepad）**调用 &lt;strong&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/strong&gt;（文档化的Windows API），该函数位于 &lt;strong&gt;&lt;code&gt;kernel32.dll&lt;/code&gt;&lt;/strong&gt;（Windows子系统DLL）。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;关键点&lt;/strong&gt;：&lt;code&gt;CreateFile&lt;/code&gt; 仍在&lt;strong&gt;用户模式&lt;/strong&gt;下运行，无法直接操作硬件或文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;CreateFile&lt;/code&gt;&lt;/strong&gt; 在参数校验后，调用 &lt;strong&gt;&lt;code&gt;NtCreateFile&lt;/code&gt;&lt;/strong&gt;（实际执行文件操作的底层函数）。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;NtCreateFile&lt;/code&gt;&lt;/strong&gt; 位于 &lt;strong&gt;&lt;code&gt;NTDLL.dll&lt;/code&gt;&lt;/strong&gt;（Windows &lt;strong&gt;Native API&lt;/strong&gt; 的实现层），是用户模式下最接近内核的接口。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：&lt;code&gt;NTDLL.dll&lt;/code&gt; 提供的Native API是Windows内核的“门面”，专为系统调用（syscall）设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. 用户态到内核态的切换机制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统调用编号（Service Number）&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NtCreateFile&lt;/code&gt; 在触发内核切换前，会将一个&lt;strong&gt;系统服务编号&lt;/strong&gt;（唯一标识请求的操作）存入CPU寄存器（x86/x64架构下为 &lt;strong&gt;EAX&lt;/strong&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特殊CPU指令&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;x86架构&lt;/strong&gt;：执行 &lt;strong&gt;&lt;code&gt;sysenter&lt;/code&gt;&lt;/strong&gt; 指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;x64架构&lt;/strong&gt;：执行 &lt;strong&gt;&lt;code&gt;syscall&lt;/code&gt;&lt;/strong&gt; 指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：通过硬件指令强制切换到&lt;strong&gt;内核模式&lt;/strong&gt;，并跳转到内核预定义的&lt;strong&gt;系统服务分发器&lt;/strong&gt;（System Service Dispatcher）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核响应&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;内核根据EAX中的编号，定位到对应的内核函数（如文件管理、设备驱动等），完成实际操作（如打开文件）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250420201127353.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250420201127353&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在进度内核层时，使用系统服务分发器（System Service Dispatcher）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当CPU通过&lt;code&gt;syscall&lt;/code&gt;/&lt;code&gt;sysenter&lt;/code&gt;进入内核模式后，控制权交给&lt;strong&gt;系统服务分发器&lt;/strong&gt;。
&lt;ul&gt;
&lt;li&gt;获取 EAX 寄存处保存的 系统服务编号。&lt;/li&gt;
&lt;li&gt;查询SSDT获取对应的系统调用函数指针。&lt;/li&gt;
&lt;li&gt;跳转到对应 地址执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调用完成返回用户模式。
&lt;ul&gt;
&lt;li&gt;CPU通过&lt;code&gt;sysexit&lt;/code&gt;（x86）或&lt;code&gt;sysret&lt;/code&gt;（x64）指令&lt;strong&gt;返回用户模式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;线程继续执行&lt;code&gt;syscall&lt;/code&gt;/&lt;code&gt;sysenter&lt;/code&gt;之后的指令（即&lt;code&gt;NTDLL.dll&lt;/code&gt;中的后续代码）。&lt;/li&gt;
&lt;li&gt;返回值通过寄存器（如EAX）或栈传递回用户态，最终由&lt;code&gt;CreateFile&lt;/code&gt;返回给应用程序（如Notepad）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;general-system-architecture-系统架构&#34;&gt;General System Architecture 系统架构
&lt;/h2&gt;&lt;p&gt;系统架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250420203107898.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250420203107898&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对应解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;用户进程user-processes&#34;&gt;&lt;strong&gt;用户进程（User Processes）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	基于可执行文件运行进程。&lt;/p&gt;
&lt;p&gt;​	运行在用户模式，无法直接访问硬件或内核资源。&lt;/p&gt;
&lt;p&gt;​	通过调用子系统DLL 或 Native API 与 操作系统交互&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;子系统dllsubsystem-dlls&#34;&gt;&lt;strong&gt;子系统DLL（Subsystem DLLs）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;实现win子系统 API 的动态链接库，提供内核功能的封装。&lt;/p&gt;
&lt;p&gt;提供&lt;strong&gt;官方文档化的Windows API&lt;/strong&gt;（如&lt;code&gt;CreateFile&lt;/code&gt;、&lt;code&gt;MessageBox&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;kernel32.dll，user32.dll 等。&lt;/p&gt;
&lt;p&gt;从Windows 8.1起，仅保留&lt;strong&gt;Windows子系统&lt;/strong&gt;（不再支持POSIX/OS2等旧子系统）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;ntdlldllwindows-native-api层&#34;&gt;&lt;strong&gt;NTDLL.DLL（Windows Native API层）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;用户模式下最底层的系统组件，核心功能有两个。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;系统调用桥接&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;实现&lt;code&gt;NtCreateFile&lt;/code&gt;、&lt;code&gt;NtOpenProcess&lt;/code&gt;等&lt;strong&gt;Native API&lt;/strong&gt;，通过&lt;code&gt;syscall&lt;/code&gt;/&lt;code&gt;sysenter&lt;/code&gt;切换到内核模式。&lt;/li&gt;
&lt;li&gt;是用户态与内核态交互的&lt;strong&gt;唯一入口&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键用户态功能&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;堆管理器（Heap Manager）&lt;/strong&gt;：管理进程内存分配（如&lt;code&gt;malloc&lt;/code&gt;/&lt;code&gt;free&lt;/code&gt;的底层实现）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映像加载器（Image Loader）&lt;/strong&gt;：加载DLL/EXE文件（解析PE结构、处理导入表）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户态线程池&lt;/strong&gt;：部分线程池逻辑在此实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;服务进程service-processes&#34;&gt;&lt;strong&gt;服务进程（Service Processes）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	与**服务控制管理器（SCM，services.exe）**交互的特殊进程。&lt;/p&gt;
&lt;p&gt;​	由SCM管理生命周期（启动、停止、暂停、恢复）接收SCM发送的控制命令。&lt;/p&gt;
&lt;p&gt;​	通常以以下内置账户运行：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Local System&lt;/strong&gt;：最高权限，等同系统内核。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Network Service&lt;/strong&gt;：网络相关操作权限。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;Local Service&lt;/strong&gt;：本地低权限服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;执行体executive&#34;&gt;&lt;strong&gt;执行体（Executive）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;位于&lt;code&gt;Ntoskrnl.exe&lt;/code&gt;（Windows内核镜像）的上层，是内核模式的主要代码载体。&lt;/p&gt;
&lt;p&gt;主要包含 &lt;strong&gt;对象管理器（Object Manager）&lt;/strong&gt;、&lt;strong&gt;内存管理器（Memory Manager）&lt;/strong&gt;、&lt;strong&gt;I/O管理器（I/O Manager）&lt;/strong&gt;、&lt;strong&gt;即插即用管理器（Plug &amp;amp; Play Manager）&lt;/strong&gt;、&lt;strong&gt;电源管理器（Power Manager）&lt;/strong&gt;、&lt;strong&gt;配置管理器（Configuration Manager）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不涉及最底层硬件操作&lt;/strong&gt;。提供结构化接口供驱动程序调用（如&lt;code&gt;ExAllocatePool&lt;/code&gt;内存分配API）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;内核层kernel&#34;&gt;&lt;strong&gt;内核层（Kernel）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	&lt;code&gt;Ntoskrnl.exe&lt;/code&gt;的下层，处理与硬件紧密交互的核心功能。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;核心职责&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;线程调度&lt;/strong&gt;：时间片分配、上下文切换（通过&lt;code&gt;KiSwapThread&lt;/code&gt;等函数）。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;中断/异常处理&lt;/strong&gt;：CPU中断请求（IRQ）和异常的首次响应（如缺页异常）。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;同步原语实现&lt;/strong&gt;：自旋锁（Spinlock）、互斥体（Mutex）、信号量（Semaphore）的原子操作。&lt;/p&gt;
&lt;p&gt;​	部分代码直接以汇编实现。直接操作CPU寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;设备驱动程序device-drivers&#34;&gt;&lt;strong&gt;设备驱动程序（Device Drivers）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	动态加载的内核模块（&lt;code&gt;.sys&lt;/code&gt;文件），扩展内核功能。&lt;/p&gt;
&lt;p&gt;​	代码运行在&lt;strong&gt;内核模式&lt;/strong&gt;，拥有与Executive同级的权限（可访问所有内存）。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;需要注意：处理IRP、内存安全（避免蓝屏）、与Executive的交互。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;win32ksyswindows子系统内核组件&#34;&gt;&lt;strong&gt;Win32k.sys（Windows子系统内核组件）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	将用户态GUI请求转换为内核操作。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;主要负责：窗口管理、图形渲染。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其他内核组件（如内存管理器）对UI无感知，通过Win32k.sys抽象交互。&lt;/p&gt;
&lt;p&gt;​	现代Windows中，部分功能已迁移至&lt;strong&gt;DirectX/DWM&lt;/strong&gt;（桌面窗口管理器）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;硬件抽象层hal-hardware-abstraction-layer&#34;&gt;&lt;strong&gt;硬件抽象层（HAL, Hardware Abstraction Layer）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	屏蔽硬件差异，为驱动提供统一硬件接口。&lt;/p&gt;
&lt;p&gt;​	抽象关键硬件组件：中断控制器（APIC/IOAPIC）、DMA控制器、时钟管理（HPET/ACPI PM Timer）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;系统进程system-processes&#34;&gt;&lt;strong&gt;系统进程（System Processes）&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;维持OS核心功能的原生进程，特点包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仅依赖NTAPI（不调用&lt;code&gt;kernel32.dll&lt;/code&gt;等子系统API）&lt;/li&gt;
&lt;li&gt;多数以&lt;code&gt;SYSTEM&lt;/code&gt;权限运行&lt;/li&gt;
&lt;li&gt;终止会导致系统崩溃（蓝屏）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;子系统进程subsystem-process&#34;&gt;&lt;strong&gt;子系统进程（Subsystem Process）&lt;/strong&gt;
&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	Windows子系统（唯一现存子系统）的&lt;strong&gt;用户态管理进程&lt;/strong&gt;，协助内核管理子系统相关功能。&lt;/p&gt;
&lt;p&gt;​	负责进程/线程的&lt;strong&gt;子系统级初始化&lt;/strong&gt;、&lt;strong&gt;控制台支持&lt;/strong&gt;（如&lt;code&gt;cmd.exe&lt;/code&gt;）和&lt;strong&gt;异常处理转发&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​	Csrss.exe是Windows子系统的“用户态管家”，&lt;strong&gt;每会话独立运行&lt;/strong&gt;，崩溃会导致系统蓝屏，是操作系统稳定性的关键组件之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hyper-V 管理程序与基于虚拟化的安全性（Hyper-V Hypervisor）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​	Hyper-V 管理程序在支持虚拟化安全（VBS）的 Windows 系统中运行，将常规操作系统作为虚拟机管理，并通过两个虚拟信任级别（VTL）增强安全性——VTL 0 运行普通系统和内核，而 VTL 1 运行安全内核和隔离用户模式，为关键安全功能提供硬件级防护。这种架构能有效防御内核攻击，但需要特定硬件支持并可能略微影响性能。&lt;/p&gt;
&lt;h2 id=&#34;handles-and-objects&#34;&gt;Handles and Objects
&lt;/h2&gt;&lt;p&gt;​	Windows内核通过对象管理器为用户态进程、内核自身及驱动提供多种内核对象，这些对象本质是系统地址空间中的数据结构，使用Object manager 创建，采用引用计数机制管理生命周期——仅当最后一个引用释放时对象才会被销毁并释放内存。&lt;/p&gt;
&lt;p&gt;（注：内核对象包括文件、线程、事件等类型，由用户态API或内核代码发起创建请求后，由执行体中的对象管理器统一构造和管理。）&lt;/p&gt;
&lt;p&gt;​	由于这些对象实例驻留在系统空间（内核内存），用户模式代码无法直接访问它们，必须通过一种间接访问机制——**句柄（handle）**来实现。句柄本质上是 &lt;strong&gt;进程私有句柄表&lt;/strong&gt;（存储于内核空间）的索引项，该表每个进程独立维护，通过句柄表中的条目最终指向系统空间中的内核对象。&lt;/p&gt;
&lt;p&gt;​	例如：用户模式函数&lt;code&gt;CreateMutex&lt;/code&gt;允许创建或打开互斥体对象（根据该命名对象是否存在而定）。若操作成功，函数将返回该对象的有效句柄；返回值为零则表示无效句柄（即函数调用失败）。而&lt;code&gt;OpenMutex&lt;/code&gt;函数则尝试打开已命名的互斥体句柄——若指定名称的互斥体不存在，函数将返回空值（0）表示操作失败。&lt;/p&gt;
&lt;p&gt;在内核中，可以直接使用 Handle 也可以 直接通过指针访问 Object，具体选择通常取决于 调用的 API 类型。某些情况下，当驱动程序需要将用户模式传递来的句柄转换为有效指针时，必须调用&lt;code&gt;ObReferenceObjectByHandle&lt;/code&gt;函数来完成转换。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;句柄值是4的倍数，其中第一个有效句柄为4；且0为无效句柄。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;需要注意两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;防悬垂指针&lt;/strong&gt;
即使用户态持有者关闭了句柄，内核代码持有的指针仍能安全访问对象——因为引用计数保证了对象存活。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;显式释放责任&lt;/strong&gt;
内核代码必须通过&lt;code&gt;ObDereferenceObject&lt;/code&gt;递减引用计数，否则会导致&lt;strong&gt;资源泄漏&lt;/strong&gt;（该泄漏仅能通过系统重启回收）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于内核对象的生命周期管理，主要Object Manager 维护了两个关键技术：句柄计数 和 总引用计数。&lt;/p&gt;
&lt;p&gt;当对象不再需要时：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户态程序&lt;/strong&gt;应调用&lt;code&gt;CloseHandle&lt;/code&gt;关闭句柄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内核态代码&lt;/strong&gt;需调用&lt;code&gt;ObDereferenceObject&lt;/code&gt;递减引用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;此后，必须视该句柄/指针为&lt;strong&gt;永久失效状态&lt;/strong&gt;。当对象的引用计数归零时，对象管理器将自动销毁该对象并回收其内存资源。&lt;/p&gt;
&lt;h2 id=&#34;object-names&#34;&gt;Object Names
&lt;/h2&gt;&lt;p&gt;对象分为：无名对象  和 命名对象&lt;/p&gt;
&lt;p&gt;并非所有对象都支持命名，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进程/线程对象仅通过数字ID标识（故 OpenProcess/OpenThread 需传入进程/线程ID）&lt;/li&gt;
&lt;li&gt;文件对象名称 ≠ 内核对象名称（二者属于不同维度的标识体系）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名对象具备跨进程共享能力，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命名互斥体（Mutex）可用于进程间同步&lt;/li&gt;
&lt;li&gt;命名事件（Event）允许不同进程监听同一信号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在用户模式代码中，调用带有名称参数的 Create 系列函数（如 CreateMutex）时，系统会遵循以下行为规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;对象不存在时&lt;/strong&gt;
函数会创建并返回一个全新命名对象的句柄&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象已存在时&lt;/strong&gt;
函数不会创建新对象，而是：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;返回指向现有对象的另一个有效句柄&lt;/li&gt;
&lt;li&gt;通过 GetLastError() 返回 ERROR_ALREADY_EXISTS（错误码 183）&lt;/li&gt;
&lt;li&gt;引用计数会增加，但不会重复创建同名对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 WinObj 可以查看对应的 Object 对象&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/sysinternals/downloads/winobj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WinObj - Sysinternals | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用管理员打开&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250422222305950.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250422222305950&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通会话进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;名称会被添加 &lt;code&gt;\Sessions\&amp;lt;会话ID&amp;gt;\BaseNamedObjects\&lt;/code&gt; 前缀&lt;/p&gt;
&lt;p&gt;会话0（服务会话）的对象直接使用 &lt;code&gt;\BaseNamedObjects\&lt;/code&gt; 前缀&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AppContainer 进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\Sessions\&amp;lt;会话ID&amp;gt;\AppContainerNamedObjects\{AppContainerSID}\&amp;lt;/会话ID&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/image-20250422222707225.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250422222707225&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;进程句柄也可以使用 process explorer 进行查看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/img/image-20250422223255629.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image-20250422223255629&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;accessing-existing-objects&#34;&gt;Accessing Existing Objects
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;若要通过句柄终止进程，调用&lt;code&gt;OpenProcess&lt;/code&gt;时必须包含至少&lt;code&gt;PROCESS_TERMINATE&lt;/code&gt;权限位&lt;/li&gt;
&lt;li&gt;成功获取此类句柄后，后续调用&lt;code&gt;TerminateProcess&lt;/code&gt;必然成功&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;KillProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DWORD&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// open a powerful-enough handle to the process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hProcess&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OpenProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PROCESS_TERMINATE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// now kill it with some arbitrary exit code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;BOOL&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;success&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TerminateProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// close the handle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hProcess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;success&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
